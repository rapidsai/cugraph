# Copyright (c) 2023, NVIDIA CORPORATION.

[build-system]

requires = [
    "setuptools>=61.0.0",
    "wheel",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
build-backend = "setuptools.build_meta"

[project]
name = "nx-cugraph"
dynamic = ["version"]
description = "cugraph backend for NetworkX"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "NVIDIA Corporation" },
]
license = { text = "Apache 2.0" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "cupy-cuda11x>=12.0.0",
    "networkx>=3.0",
    "numpy>=1.21",
    "pylibcugraph==24.4.*",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.optional-dependencies]
test = [
    "packaging>=21",
    "pandas",
    "pytest",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-mpl",
    "pytest-xdist",
    "scipy",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.urls]
Homepage = "https://github.com/rapidsai/cugraph"
Documentation = "https://docs.rapids.ai/api/cugraph/stable/"

# "plugin" used in nx version < 3.2
[project.entry-points."networkx.plugins"]
cugraph = "nx_cugraph.interface:BackendInterface"

[project.entry-points."networkx.plugin_info"]
cugraph = "_nx_cugraph:get_info"

# "backend" used in nx version >= 3.2
[project.entry-points."networkx.backends"]
cugraph = "nx_cugraph.interface:BackendInterface"

[project.entry-points."networkx.backend_info"]
cugraph = "_nx_cugraph:get_info"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.dynamic]
version = {file = "nx_cugraph/VERSION"}

[tool.setuptools.packages.find]
include = [
    "nx_cugraph*",
    "nx_cugraph.*",
    "_nx_cugraph*",
    "_nx_cugraph.*",
]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
profile = "black"
skip_gitignore = true
float_to_top = true
default_section = "THIRDPARTY"
known_first_party = "nx_cugraph"
line_length = 88
extend_skip_glob = [
    "nx_cugraph/__init__.py",
    "nx_cugraph/classes/__init__.py",
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = "nx_cugraph/tests"
xfail_strict = true
markers = [
    "slow: Skipped unless --runslow passed",
]
log_cli_level = "info"
filterwarnings = [
    # See: https://docs.python.org/3/library/warnings.html#describing-warning-filters
    # and: https://docs.pytest.org/en/7.2.x/how-to/capture-warnings.html#controlling-warnings
    # "error",
]
python_files = [
    "bench_*.py",
    "test_*.py",
]
python_functions = [
    "bench_*",
    "test_*",
]
addopts = [
    "--strict-config",  # Force error if config is mispelled
    "--strict-markers",  # Force error if marker is mispelled (must be defined in config)
    # "-ra",  # Print summary of all fails/errors
    "--benchmark-warmup=off",
    "--benchmark-max-time=0",
    "--benchmark-min-rounds=1",
    "--benchmark-columns=min,median,max",
]

[tool.coverage.run]
branch = true
source = ["nx_cugraph"]
omit = []

[tool.coverage.report]
ignore_errors = false
precision = 1
fail_under = 0
skip_covered = false  # Nice to see fully covered files when running `run_nx_tests.sh`
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
# https://github.com/charliermarsh/ruff/
line-length = 88
target-version = "py39"
unfixable = [
    "F841",  # unused-variable (Note: can leave useless expression)
]
select = [
    "ALL",
]
external = [
    # noqa codes that ruff doesn't know about: https://github.com/charliermarsh/ruff#external
]
ignore = [
    # Would be nice to fix these
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method

    # Maybe consider
    # "SIM300",  # Yoda conditions are discouraged, use ... instead (Note: we're not this picky)
    # "SIM401",  # Use dict.get ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    # "TRY004",  # Prefer `TypeError` exception for invalid type (Note: good advice, but not worth the nuisance)
    "B904",  # Bare `raise` inside exception clause (like TRY200; sometimes okay)
    "TRY200",  # Use `raise from` to specify exception cause (Note: sometimes okay to raise original exception)

    # Intentionally ignored
    "A003",  # Class attribute ... is shadowing a python builtin
    "ANN101",  # Missing type annotation for `self` in method
    "ARG004",  # Unused static method argument: `...`
    "COM812",  # Trailing comma missing
    "D203",  # 1 blank line required before class docstring (Note: conflicts with D211, which is preferred)
    "D400",  # First line should end with a period (Note: prefer D415, which also allows "?" and "!")
    "F403",  # `from .classes import *` used; unable to detect undefined names (Note: used to match networkx)
    "N801",  # Class name ... should use CapWords convention (Note:we have a few exceptions to this)
    "N802",  # Function name ... should be lowercase
    "N803",  # Argument name ... should be lowercase (Maybe okay--except in tests)
    "N806",  # Variable ... in function should be lowercase
    "N807",  # Function name should not start and end with `__`
    "N818",  # Exception name ... should be named with an Error suffix (Note: good advice)
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic number used in comparison, consider replacing magic with a constant variable
    "PLW2901",  # Outer for loop variable ... overwritten by inner assignment target (Note: good advice, but too strict)
    "RET502",  # Do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # Unnecessary variable assignment before `return` statement
    "S110",  # `try`-`except`-`pass` detected, consider logging the exception (Note: good advice, but we don't log)
    "S112",  # `try`-`except`-`continue` detected, consider logging the exception (Note: good advice, but we don't log)
    "SIM102",  # Use a single `if` statement instead of nested `if` statements (Note: often necessary)
    "SIM105",  # Use contextlib.suppress(...) instead of try-except-pass (Note: try-except-pass is much faster)
    "SIM108",  # Use ternary operator ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    "TRY003",  # Avoid specifying long messages outside the exception class (Note: why?)

    # Ignored categories
    "C90",  # mccabe (Too strict, but maybe we should make things less complex)
    "I",  # isort (Should we replace `isort` with this?)
    "ANN",  # flake8-annotations
    "BLE",  # flake8-blind-except (Maybe consider)
    "FBT",  # flake8-boolean-trap (Why?)
    "DJ",  # flake8-django (We don't use django)
    "EM",  # flake8-errmsg (Perhaps nicer, but too much work)
    # "ICN",  # flake8-import-conventions (Doesn't allow "_" prefix such as `_np`)
    "PYI",  # flake8-pyi (We don't have stub files yet)
    "SLF",  # flake8-self (We can use our own private variables--sheesh!)
    "TID",  # flake8-tidy-imports (Rely on isort and our own judgement)
    # "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments (Sometimes helpful, but too strict)
    "TD",  # flake8-todos (Maybe okay to add some of these)
    "FIX",  # flake8-fixme (like flake8-todos)
    "ERA",  # eradicate (We like code in comments!)
    "PD",  # pandas-vet (Intended for scripts that use pandas, not libraries)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports (w/o defining `__all__`)
# Allow assert, print, RNG, and no docstring
"nx_cugraph/**/tests/*py" = ["S101", "S311", "T201", "D103", "D100"]
"_nx_cugraph/__init__.py" = ["E501"]
"nx_cugraph/algorithms/**/*py" = ["D205", "D401"]  # Allow flexible docstrings for algorithms

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["copyright"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.pydocstyle]
convention = "numpy"
